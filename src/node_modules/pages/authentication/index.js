import React, {useState, useEffect, useContext} from 'react'
import {Link, Redirect} from 'react-router-dom'

import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'
import {CurrentUserContext} from 'contexts/currentUser'
import BackendErrorMessages from 'pages/authentication/components/backendErrorMessages'

const Authentication = (props) => {
    const isLogin = props.match.path === '/login'
    const pageTitle = isLogin ? 'Sign In' : 'Sign Up'
    const descriptionLink = isLogin ? '/register' : '/login'
    const descriptionText = isLogin ? 'Need an account?' : 'Have an account?'
    const apiUrl = isLogin ? '/login' : '/create-user'
    const [email, setEmail] = useState('')
    const [password, setPassword] = useState('')
    const [name, setUsername] = useState('')
    const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false)
    const [{isLoading, error, response}, doFetch] = useFetch(apiUrl)
    const [token, setToken] = useLocalStorage('token')
    const [currentUserState, setCurrentUserState] = useContext(CurrentUserContext)
    console.log('currentUserState', currentUserState)
    // console.log("error - ",error)

    const handleSubmit = event => {
        event.preventDefault()

        const data = isLogin ? {email, password} : {email, password, name}

        // {
        //     username: 'test1',
        //         email: 'test1@gmail.com',
        //     password: 1111
        // }

        doFetch({
            method: 'post',
            data
        })
    }

    useEffect(() => {
        if (!response) {
            return
        }

        localStorage.setItem('token', response.token)
        setToken(response.token)
        setIsSuccessfullSubmit(true)
        setCurrentUserState(state => ({
            ...state,
            isLoggedIn: true,
            isLoading: false,
            currentUser: response
        }))
    }, [response, setToken, setCurrentUserState])

    if (isSuccessfullSubmit) {
        return <Redirect to="/" />
    }

    return (
        <div className="auth-page">
            <div className="container page">
                <div className="row">
                    <div className="col-md-6 offset-md-3 col-xs-12">
                        <h1 className="text-center">{pageTitle}</h1>
                        <p className="text-center">
                            <Link to={descriptionLink}>{descriptionText}</Link>
                        </p>
                        {error && <BackendErrorMessages backendErrors={error} />}
                        <form onSubmit={handleSubmit}>
                            <fieldset>
                                {!isLogin && (
                                    <fieldset className="form-group">
                                        <input
                                            type="text"
                                            className="form-control form-control-lg"
                                            placeholder="Username"
                                            value={name}
                                            onChange={e => setUsername(e.target.value)}
                                        />
                                    </fieldset>
                                )}
                                <fieldset className="form-group">
                                    <input
                                        type="email"
                                        className="form-control form-control-lg"
                                        placeholder="Email"
                                        value={email}
                                        onChange={e => setEmail(e.target.value)}
                                    />
                                </fieldset>
                                <fieldset className="form-group">
                                    <input
                                        type="password"
                                        className="form-control form-control-lg"
                                        placeholder="Password"
                                        value={password}
                                        onChange={e => setPassword(e.target.value)}
                                    />
                                </fieldset>
                                <div className="d-grid gap-2 d-md-flex justify-content-md-end">
                                <button
                                    disabled={isLoading}
                                    className="btn btn-lg btn-success"
                                    type="submit"
                                >
                                    {pageTitle}
                                </button>
                                </div>
                            </fieldset>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default Authentication
